# ==========================================================
# 1) Create AWS Infrastructure (VPC → Subnet → IGW → RT → SG → EC2)
#    Runs locally
# ==========================================================
- name: Create AWS infrastructure for the app
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - group_vars/env
    - group_vars/docker.env
  vars:
    ansible_host_key_checking: false
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ network }}"
        region: "{{ zone }}"
        state: present
        dns_hostnames: yes
        dns_support: yes
        tags:
          Name: "{{ vpc_name }}"
      register: vpc

    - name: Save VPC ID to vars file
      ansible.builtin.lineinfile:
        path: group_vars/env
        regexp: "^vpc_id:"
        line: "vpc_id: {{ vpc.vpc.id }}"
        state: present
        create: true

    - name: Create public subnet in the VPC
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ zone }}"
        cidr: "{{ subnet_public }}"
        map_public: yes
        az: "{{ subnet1 }}"
        resource_tags:
          Name: "{{ vpc_name }}_public"
      register: subnet

    - name: Save Subnet ID to vars file
      ansible.builtin.lineinfile:
        path: group_vars/env
        regexp: "^subnet_id:"
        line: "subnet_id: {{ subnet.subnet.id }}"
        state: present
        create: true

    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ zone }}"
        state: present
        tags:
          Name: "{{ vpc_name }}_igw"
      register: igw

    - name: Save IGW ID to vars file
      ansible.builtin.lineinfile:
        path: group_vars/env
        regexp: "^igw_id:"
        line: "igw_id: {{ igw.gateway_id }}"
        state: present
        create: true

    - name: Create route table for public subnet
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ zone }}"
        state: present
        subnets:
          - "{{ subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        tags:
          Name: "{{ vpc_name }}_public_rt"

    - name: Create Security Group (allow SSH + HTTP)
      amazon.aws.ec2_group:
        name: "{{ vpc_name }}_sg"
        description: "{{ vpc_name }} VPC Security Group"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ zone }}"
        state: present
        rules:
          - proto: tcp
            ports:
              - 80
              - 22
            cidr_ip: 0.0.0.0/0
      register: sg

    - name: Launch EC2 instance
      amazon.aws.ec2_instance:
        name: "{{ server_name }}"
        key_name: "{{ keypair }}"
        instance_type: "{{ server_type }}"
        image_id: "{{ aws_ubuntu_ami }}"
        region: "{{ zone }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        security_group: "{{ sg.group_id }}"
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_type: gp3
              volume_size: "{{ server_volume_size }}"
              delete_on_termination: true
        network:
          assign_public_ip: yes
        tags:
          Environment: "{{ env }}"
        wait: yes
        state: running
      register: server_ec2

    - name: Get public IP of EC2
      amazon.aws.ec2_instance_info:
        region: "{{ zone }}"
        filters:
          "tag:Name": "{{ server_name }}"
          instance-state-name: ["running"]
      register: ec2_data

    - name: Show EC2 public IP
      debug:
        var: ec2_data.instances[0].public_ip_address

    - name: Add server to 'app' host group
      add_host:
        hostname: "{{ ec2_data.instances[0].public_ip_address }}"
        groups: app
        ansible_user: ubuntu
        ansible_ssh_private_key_file: ~/.ssh/Final_Project_KeyPair.pem
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

    - name: Wait for SSH to be ready
      wait_for:
        host: "{{ ec2_data.instances[0].public_ip_address }}"
        port: 22
        timeout: 300

    - name: Pause to allow server boot
      ansible.builtin.pause:
        seconds: 30

# ==========================================================
# 2) Install Docker + Build & Push to DockerHub + Deploy App
# ==========================================================
- name: Configure server and deploy application
  hosts: app
  user: ubuntu
  become: yes
  gather_facts: false
  vars_files:
    - group_vars/docker.env

  tasks:
    - name: Add Docker GPG key
      ansible.builtin.shell: wget -qO - https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

    - name: Add Docker repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu jammy stable
        state: present

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: latest
        update_cache: true

    - name: Restart Docker service
      service:
        name: docker
        state: restarted
        enabled: yes

    - name: Copy SSH key for Git clone
      copy:
        src: ~/.ssh/id_rsa
        dest: ~/.ssh/id_rsa
        mode: "0600"

    - name: Clone application repository
      git:
        repo: git@github.com:amikahlon/Final_Project_DevOps.git
        dest: /home/ubuntu/app
        version: main
        key_file: ~/.ssh/id_rsa
        accept_hostkey: yes
        force: yes

    - name: Build and push Docker image to DockerHub
      shell: "{{ item }}"
      args:
        chdir: /home/ubuntu/app
      with_items:
        - docker login -u {{ docker_user }} -p {{ docker_token }}
        - docker build . --tag {{ docker_user }}/odd-or-even-web:latest
        - docker push {{ docker_user }}/odd-or-even-web:latest

    - name: Deploy application with Docker Compose
      shell: |
        docker compose pull
        docker compose up -d --force-recreate
      args:
        chdir: /home/ubuntu/app

    - name: Get public IP from server
      shell: curl -s ident.me
      register: ip_address

    - name: Show application URL
      debug:
        msg:
          - "App is available at: http://{{ ip_address.stdout }}"
          - "If needed, update GitHub HOST secret to {{ ip_address.stdout }}"
